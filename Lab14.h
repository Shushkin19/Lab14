#pragma once

/*1. Бухгалтерский учет

Необходимо создать программу для автоматизации бухгалтерского учета.
Могут появляться новые специалисты (маркетолог, тестировщик и т.д.) со своими алгоритмами учета заработной платы.
У каждого сотрудника есть фамилия произвольной длины (name) и уникальный числовой индентификатор (id). 

Основной класс:
Class WorkerBase {
private:
...
public:
	...
	int calcTotalSalary(); //расчет общего объема заработной платы в фирме
};


A. Бухгалтер	
данные: постоянная зарплата.	
действия: рассчитать зарплату в текущем месяце (постоянная 	зарплата + размер премии).



B. Сотрудник отдела продажам
данные: количество проданных экземпляров, выплачиваемый % от продаж, цена экземпляра, 
название филиала (строка произвольной длины).
действия: 	рассчитать зарплату в текущем месяце 	((% от продаж) * количество * цена).		



C. Программист
данные: ставка, стаж, квалификация (дробное от 1 до 2), есть ли премия (логическое поле).	
действия: рассчитать зарплату в текущем месяце 			(ставка + квалификация*1000$ + премия за проект)



Основной класс WorkerBase основан на связном списке.
Связаный список должен быть реализован с помощью двух классов Node (элемент списка) и List (сам список). 



Class WorkerBase {	
private:
?
public:
	void add(?);
	void erase(?);
	? find(?);
	int calcTotalSalary(); //расчет общего объема заработной платы в фирме
};

*/


///ДОП
/*доп14:
1) оператор« (вывод бд через cout « bd),!!!
2) добавить класс директор, который может управлять работникам:
менять зп, премии и тп !!!
увольнять: 

1-по рейтингу (добавить рейтинг для сотрудников и удалять по меньше заданному рейтингу),  !!!

2 - по ФИО — перегрузка функции !!!

3 нанимать новых сотрудников !!!

Все сделать через методы для директора
private:
WorkerBase

public:
changeSalaryForProgrammer и тп
delete(ФИО) — пусть имена у работников не повторяются или добавить идентификатор профессии
delete(rating)
addNewWorker(Worker)*/
using namespace std;
char* EnterWord();






